<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
	<node pkg="octomap_server" exec="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" value="/map" />
		<param name="base_frame_id" value="base_link" />

		<param name="latch" value="false" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model.max_range" value="12.0" />
		<param name="sensor_model.min_range" value="1.0" />
		<!-- <param name="point_cloud_min_x" value"" /> -->

		<param name="octomap_path" value="/home/danitech/master_ws/src/Danitech-master/mapping/wagon_octomap/maps/testmap.bt" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/wagon/base_scan/lidar_data" />
	</node>
</launch>
